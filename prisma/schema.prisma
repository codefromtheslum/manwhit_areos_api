// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String       @id @default(uuid())
  email                     String       @unique
  password                  String? // Make password optional for social login users
  firstName                 String?
  lastName                  String?
  googleId                  String?      @unique // Store Google's unique ID
  avatarUrl                 String? // Profile picture from Google
  verified                  Boolean      @default(false)
  verficationCode           String?
  verificationCodeExpiresIn String?
  recoveryCode              String?
  refreshToken              String?
  recoveryCodeExpiresIn     String?
  phone                     String?
  gender                    String?
  dob                       String?
  nationality               String?
  passportNo                String?
  passportExpiry            String?
  role                      Role         @default(USER)
  bookings                  Booking[]
  reviews                   Review[]
  cart                      FlightCart[] // User can have multiple flights in cart
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Booking {
  id             String      @id @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  referenceId    String      @unique // Booking reference for customers
  type           BookingType
  verified       Boolean     @default(false)
  status         Status      @default(PENDING)
  // API response data stored as JSON
  apiResponse    Json // Store the full API response for reference
  bookingDetails Json // Store the essential booking details
  totalAmount    Float?
  currency       String?     @default("USD")
  // API tracking information
  apiProvider    String      @default("AMADEUS")
  apiReferenceId String? // Reference ID from Amadeus

  // Relation to reviews
  review          Review?
  travelers       Traveler[]
  locationDetails Json?
  airlineDetails  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String      @id @default(uuid())
  bookingId   String      @unique
  booking     Booking     @relation(fields: [bookingId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  rating      Int // Rating from 1 to 5
  comment     String? // Optional review comment
  serviceType ServiceType // What part of the service are they rating
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model FlightCart {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  flightData Json // the selected flightOffer from Amadeus
  createdAt  DateTime @default(now())
}

model Traveler {
  id               String    @id @default(uuid())
  Booking          Booking?  @relation(fields: [bookingId], references: [id])
  bookingId        String?
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           String
  email            String
  phone            String
  countryCode      String
  birthPlace       String?
  passportNumber   String?
  passportExpiry   DateTime?
  issuanceCountry  String?
  validityCountry  String?
  nationality      String?
  issuanceDate     DateTime?
  issuanceLocation String?
}

enum ServiceType {
  OVERALL_EXPERIENCE
  FLIGHT_SERVICE
  ACCOMMODATION
  RENTAL_SERVICE
  BOOKING_PROCESS
  CUSTOMER_SUPPORT
}

enum BookingType {
  FLIGHT
  HOTEL
  CAR
}

enum Status {
  PENDING
  CONFIRMED
  PAID
  CANCELED
  REFUNDED
}
